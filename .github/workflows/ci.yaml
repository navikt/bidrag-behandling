name: Deploy to dev
on:
  pull_request:
  push:
    branches:
      - '!main'
      - '**'

env:
  GITHUB_USERNAME: x-access-token
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    permissions:
      contents: "read"
      id-token: "write"
      pull-requests: "read"
    name: Build with maven and docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: 8BitJonny/gh-get-current-pr@2.2.0
        id: PR
        with:
          filterOutClosed: true
          filterOutDraft: true
      - uses: 8BitJonny/gh-get-current-pr@2.2.0
        id: DRAFT_PR
        with:
          filterOutClosed: true
          filterOutDraft: false
#      - uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - uses: actions/cache@v3
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - run: mvn -Dmaven.test.skip=true -B -e --settings .m2/maven-settings.xml clean install
#      - uses: nais/docker-build-push@v0
#        id: docker-push
#        with:
#          team: bidrag
#          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
#          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
      - run: |
          echo ${{steps.PR.outputs.number}}
          echo ${{steps.PR.outputs.number == 'null'}}
          echo ${{steps.PR.outputs.number != 'null'}}
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
      tag: ${{ steps.docker-push.outputs.tag }}
      is_open_PR: ${{ steps.PR.outputs.number != '0' }}
      is_draft_PR: ${{ steps.DRAFT_PR.outputs.number != '0' }}

  run-tests:
    runs-on: ubuntu-latest
    name: Run tests
    needs: build
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo ${{needs.build.outputs.is_open_PR}}
          echo ${{needs.build.outputs.is_open_PR == 'true'}}
          echo ${{needs.build.outputs.is_open_PR == true}}
  run-tests2:
    runs-on: ubuntu-latest
    name: Run tests
    needs: build
    if: needs.build.outputs.is_open_PR == 'true'
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo ${{needs.build.outputs.is_open_PR}}
#      - uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#      - uses: actions/cache@v3
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - run: mvn -B -e --settings .m2/maven-settings.xml clean install
#
#  deploy-main:
#    runs-on: ubuntu-latest
#    name: Deploy main
#    needs: build
#    if: needs.build.outputs.is_open_PR == 'true'
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          path: deploy
#      - name: Deploy main branch to dev-gcp
#        uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: dev-gcp
#          RESOURCE: deploy/.nais/nais.yaml
#          VARS: deploy/.nais/main.yaml
#          IMAGE: ${{ needs.build.outputs.image }}
#
#  deploy-feature:
#    runs-on: ubuntu-latest
#    name: Deploy feature
#    #    if: github.ref == 'refs/heads/main' || ${{needs.build.outputs.is_open_PR}} == false && ${{needs.build.outputs.is_draft_PR}}
#    needs: build
#
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          path: deploy
#      - name: Deploy to dev-gcp for feature.yaml
#        uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: dev-gcp
#          RESOURCE: deploy/.nais/nais.yaml
#          VARS: deploy/.nais/feature.yaml
#          IMAGE: ${{ needs.build.outputs.image }}
